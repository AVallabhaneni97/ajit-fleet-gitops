name: 'Apply latest configuration profiles via Fleet'
description: 'Applies the latest MDM configuration profiles to a Fleet team'

inputs:
  FLEET_API_TOKEN:
    description: 'Fleet API Token'
    required: true
  FLEET_URL:
    description: 'Fleet URL'
    required: true
  FLEET_TEAM_NAME:
    description: 'Fleet team name to apply MDM configuration profiles to'
    required: true
    default: "Workstations"
  MDM_CONFIG_REPO: 
    description: 'Repository containing MDM configuration profiles'
    required: true
    default: 'fleetdm/fleet'
  MDM_CONFIG_DIRECTORY:
    description: 'Directory in repo where MDM configuration files are stored'
    required: true
    default: 'mdm_profiles'
  MAC_OS_MIN_VERSION:
    description: 'Minimum macOS version of hosts'
    required: false
  MAC_OS_VERSION_DEADLINE:
    description: 'Deadline for macOS version'
    required: false
  MAC_OS_ENABLE_DISK_ENCRYPTION: 
    description: 'Enable disk encryption'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v2
      with:
        repository: ${{ inputs.MDM_CONFIG_REPO }}

    - name: Install fleetctl
      run: npm install -g fleetctl
      shell: bash

    - name: Configure fleetctl
      run: fleetctl config set --address ${{ inputs.FLEET_URL }} --token ${{ inputs.FLEET_API_TOKEN }}
      shell: bash

    - name: Run fleetctl apply
      run: |
        profiles=""

        for file in mdm_profiles/*.mobileconfig; do
          envsubst < "$file" > "${file}.new"
          mv "${file}.new" "$file"
          profiles+=$'          - '$file$'\n'
        done

        os_updates=""
        if [[ -n ${{ inputs.MAC_OS_MIN_VERSION }} ]] || [[ -n ${{ inputs.MAC_OS_VERSION_DEADLINE }} ]]; then
            os_updates=$'macos_updates:\n'
            if [[ -n ${{ inputs.MAC_OS_MIN_VERSION }} ]]; then
                os_updates+=$'minimum_version: ${{ inputs.MAC_OS_MIN_VERSION }}\n'
            fi
            if [[ -n ${{ inputs.MAC_OS_VERSION_DEADLINE }} ]]; then
                os_updates+=$'deadline: ${{ inputs.MAC_OS_VERSION_DEADLINE }}\n'
            fi
        fi

        disk_encryption=""
        if [[ -n ${{ inputs.MAC_OS_ENABLE_DISK_ENCRYPTION }} ]]; then
            disk_encryption=$'                enable_disk_encryption: ${{ inputs.MAC_OS_ENABLE_DISK_ENCRYPTION }}\n'
        fi

        echo "apiVersion: v1
        kind: team
        spec:
          team:
            name: ${{ inputs.FLEET_TEAM_NAME }}
            mdm:
              $os_updates
              macos_settings:
              $disk_encryption
                custom_settings:
        $profiles
        " > team-workstations-config.yml
        fleetctl apply -f team-workstations-config.yml
      shell: bash
